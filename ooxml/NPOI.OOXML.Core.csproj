<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1</TargetFrameworks>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <AssemblyName>NPOI.OOXML</AssemblyName>
    <RootNamespace>NPOI.OOXML</RootNamespace>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>npoi.snk</AssemblyOriginatorKeyFile>

	  <PackageId>Xenoage.Experimental.NPOI.OOXML.Core.WithoutSystemDrawing</PackageId>
	  <PackageVersion>0.0.2</PackageVersion>
	  <RepositoryUrl>https://github.com/Xenoage/npoi</RepositoryUrl>
	  <PackageTags>NPOI</PackageTags>
	  <Description>
		  This experimental update of the NPOI library removes all System.Drawing (GDI+) dependencies and replaces them by
		  SixLabors.ImageSharp dependencies. It was started because System.Drawing is deprecated starting from .NET 6 on
		  non-Windows platforms.
	  </Description>
	  
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>C:\github\npoi\ooxml\NPOI.OOXML.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <OutputPath>..\solution\Lib</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2.0|AnyCPU'">
    <OutputPath></OutputPath>
    <WarningLevel>5</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="POIFS\Crypt\Dsig\KeyInfoKeySelector.cs" />
    <Compile Remove="POIFS\Crypt\Dsig\Services\RelationshipTransformService.cs" />
    <Compile Remove="Properties\AssemblyInfoDotnet2.cs" />
    <Compile Remove="XSSF\Extractor\XSSFEventBasedExcelExtractor.cs" />
    <Compile Remove="XSSF\UserModel\Charts\XSSFNumberCache.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="XSSF\UserModel\presetTableStyles.xml" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Resources\presetTableStyles.xml" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Security.Cryptography.Xml" Version="4.5.0" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0" PrivateAssets="All" />
	  
	  <!-- Copied from NPOI.Core -->
	  <PackageReference Include="Enums.NET" Version="4.0.0" />
	  <PackageReference Include="Microsoft.IO.RecyclableMemoryStream" Version="2.2.0" />
	  <PackageReference Include="Portable.BouncyCastle" Version="1.8.9" />
	  <PackageReference Include="SharpZipLib" Version="1.3.3" />
	  <PackageReference Include="SixLabors.ImageSharp" Version="2.1.0" />
	  <PackageReference Include="System.Configuration.ConfigurationManager" Version="4.5.0" />
	  <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
	  
  </ItemGroup>

  <ItemGroup>
	  <!-- PrivateAssets="All" added for creating a single nuget package with these projects included -->
    <ProjectReference Include="..\main\NPOI.Core.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\openxml4Net\NPOI.OpenXml4Net.Core.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\OpenXmlFormats\NPOI.OpenXmlFormats.Core.csproj" PrivateAssets="All" />
  </ItemGroup>

	<!-- Required for a single nuget package; see https://josef.codes/dotnet-pack-include-referenced-projects/ -->
	<PropertyGroup>
		<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
	</PropertyGroup>
	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences">
		<ItemGroup>
			<!-- Filter out unnecessary files -->
			<_ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'All'))"/>
		</ItemGroup>

		<!-- Print batches for debug purposes -->
		<Message Text="Batch for .nupkg: ReferenceCopyLocalPaths = @(_ReferenceCopyLocalPaths), ReferenceCopyLocalPaths.DestinationSubDirectory = %(_ReferenceCopyLocalPaths.DestinationSubDirectory) Filename = %(_ReferenceCopyLocalPaths.Filename) Extension = %(_ReferenceCopyLocalPaths.Extension)" Importance="High" Condition="'@(_ReferenceCopyLocalPaths)' != ''" />

		<ItemGroup>
			<!-- Add file to package with consideration of sub folder. If empty, the root folder is chosen. -->
			<BuildOutputInPackage Include="@(_ReferenceCopyLocalPaths)" TargetPath="%(_ReferenceCopyLocalPaths.DestinationSubDirectory)"/>
		</ItemGroup>
	</Target>
	
</Project>
